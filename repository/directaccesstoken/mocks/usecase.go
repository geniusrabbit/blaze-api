// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/geniusrabbit/blaze-api/model"
	repository "github.com/geniusrabbit/blaze-api/repository"
	directaccesstoken "github.com/geniusrabbit/blaze-api/repository/directaccesstoken"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockUsecase) Count(ctx context.Context, filter *directaccesstoken.Filter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockUsecaseMockRecorder) Count(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockUsecase)(nil).Count), ctx, filter)
}

// FetchList mocks base method.
func (m *MockUsecase) FetchList(ctx context.Context, filter *directaccesstoken.Filter, order *directaccesstoken.Order, page *repository.Pagination) ([]*model.DirectAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchList", ctx, filter, order, page)
	ret0, _ := ret[0].([]*model.DirectAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchList indicates an expected call of FetchList.
func (mr *MockUsecaseMockRecorder) FetchList(ctx, filter, order, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchList", reflect.TypeOf((*MockUsecase)(nil).FetchList), ctx, filter, order, page)
}

// Generate mocks base method.
func (m *MockUsecase) Generate(ctx context.Context, userID, accountID uint64, description string, expiresAt time.Time) (*model.DirectAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx, userID, accountID, description, expiresAt)
	ret0, _ := ret[0].(*model.DirectAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockUsecaseMockRecorder) Generate(ctx, userID, accountID, description, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockUsecase)(nil).Generate), ctx, userID, accountID, description, expiresAt)
}

// Get mocks base method.
func (m *MockUsecase) Get(ctx context.Context, id uint64) (*model.DirectAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.DirectAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUsecaseMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsecase)(nil).Get), ctx, id)
}

// Revoke mocks base method.
func (m *MockUsecase) Revoke(ctx context.Context, filter *directaccesstoken.Filter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockUsecaseMockRecorder) Revoke(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockUsecase)(nil).Revoke), ctx, filter)
}
