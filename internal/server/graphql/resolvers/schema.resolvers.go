package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"time"

	"github.com/geniusrabbit/api-template-base/internal/server/graphql/connectors"
	"github.com/geniusrabbit/api-template-base/internal/server/graphql/generated"
	"github.com/geniusrabbit/api-template-base/internal/server/graphql/models"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, login string, password string) (*models.SessionToken, error) {
	token, lifetime, err := r.accAuth.Login(ctx, login, password)
	if err != nil {
		return nil, err
	}
	return &models.SessionToken{
		Token:     token,
		ExpiresAt: time.Now().Add(lifetime),
	}, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	return r.accAuth.Logout(ctx)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input models.UserInput) (*models.UserPayload, error) {
	return r.users.CreateUser(ctx, &input)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input models.UserInput) (*models.UserPayload, error) {
	return r.users.UpdateUser(ctx, id, &input)
}

// ApproveUser is the resolver for the approveUser field.
func (r *mutationResolver) ApproveUser(ctx context.Context, id int, msg *string) (*models.UserPayload, error) {
	return r.users.ApproveUser(ctx, id, msg)
}

// RejectUser is the resolver for the rejectUser field.
func (r *mutationResolver) RejectUser(ctx context.Context, id int, msg *string) (*models.UserPayload, error) {
	return r.users.RejectUser(ctx, id, msg)
}

// ResetUserPassword is the resolver for the resetUserPassword field.
func (r *mutationResolver) ResetUserPassword(ctx context.Context, id int) (*models.UserPayload, error) {
	return r.users.ResetUserPassword(ctx, id)
}

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input models.AccountInput) (*models.AccountPayload, error) {
	return r.accounts.CreateAccount(ctx, &input)
}

// UpdateAccount is the resolver for the updateAccount field.
func (r *mutationResolver) UpdateAccount(ctx context.Context, id int, input models.AccountInput) (*models.AccountPayload, error) {
	return r.accounts.UpdateAccount(ctx, uint64(id), &input)
}

// ApproveAccount is the resolver for the approveAccount field.
func (r *mutationResolver) ApproveAccount(ctx context.Context, id int, msg string) (*models.AccountPayload, error) {
	return r.accounts.ApproveAccount(ctx, uint64(id), msg)
}

// RejectAccount is the resolver for the rejectAccount field.
func (r *mutationResolver) RejectAccount(ctx context.Context, id int, msg string) (*models.AccountPayload, error) {
	return r.accounts.RejectAccount(ctx, uint64(id), msg)
}

// CreateAuthClient is the resolver for the createAuthClient field.
func (r *mutationResolver) CreateAuthClient(ctx context.Context, input models.AuthClientInput) (*models.AuthClientPayload, error) {
	return r.authclients.CreateAuthClient(ctx, &input)
}

// UpdateAuthClient is the resolver for the updateAuthClient field.
func (r *mutationResolver) UpdateAuthClient(ctx context.Context, id string, input models.AuthClientInput) (*models.AuthClientPayload, error) {
	return r.authclients.UpdateAuthClient(ctx, id, &input)
}

// DeleteAuthClient is the resolver for the deleteAuthClient field.
func (r *mutationResolver) DeleteAuthClient(ctx context.Context, id string, msg *string) (*models.AuthClientPayload, error) {
	return r.authclients.DeleteAuthClient(ctx, id, msg)
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input models.RBACRoleInput) (*models.RBACRolePayload, error) {
	return r.roles.CreateRole(ctx, &input)
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id int, input models.RBACRoleInput) (*models.RBACRolePayload, error) {
	return r.roles.UpdateRole(ctx, uint64(id), &input)
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id int, msg *string) (*models.RBACRolePayload, error) {
	return r.roles.DeleteRole(ctx, uint64(id), msg)
}

// CurrentUser is the resolver for the currentUser field.
func (r *queryResolver) CurrentUser(ctx context.Context) (*models.UserPayload, error) {
	return r.users.CurrentUser(ctx)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int, username string) (*models.UserPayload, error) {
	return r.users.User(ctx, id, username)
}

// ListUsers is the resolver for the listUsers field.
func (r *queryResolver) ListUsers(ctx context.Context, filter *models.UserListFilter, order []*models.UserListOrder, page *models.Page) (*connectors.UserConnection, error) {
	return r.users.ListUsers(ctx, filter, order, page)
}

// CurrentAccount is the resolver for the currentAccount field.
func (r *queryResolver) CurrentAccount(ctx context.Context) (*models.AccountPayload, error) {
	return r.accounts.CurrentAccount(ctx)
}

// ListAccounts is the resolver for the listAccounts field.
func (r *queryResolver) ListAccounts(ctx context.Context, filter *models.AccountListFilter, order []*models.AccountListOrder, page *models.Page) (*connectors.AccountConnection, error) {
	return r.accounts.ListAccounts(ctx, filter, order, page)
}

// AuthClient is the resolver for the authClient field.
func (r *queryResolver) AuthClient(ctx context.Context, id string) (*models.AuthClientPayload, error) {
	return r.authclients.AuthClient(ctx, id)
}

// ListAuthClients is the resolver for the listAuthClients field.
func (r *queryResolver) ListAuthClients(ctx context.Context, filter *models.AuthClientListFilter, order []*models.AuthClientListOrder, page *models.Page) (*connectors.AuthClientConnection, error) {
	return r.authclients.ListAuthClients(ctx, filter, order, page)
}

// Role is the resolver for the Role field.
func (r *queryResolver) Role(ctx context.Context, id int) (*models.RBACRolePayload, error) {
	return r.roles.Role(ctx, uint64(id))
}

// ListRoles is the resolver for the listRoles field.
func (r *queryResolver) ListRoles(ctx context.Context, filter *models.RBACRoleListFilter, order []*models.RBACRoleListOrder, page *models.Page) (*connectors.RBACRoleConnection, error) {
	return r.roles.ListRoles(ctx, filter, order, page)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
