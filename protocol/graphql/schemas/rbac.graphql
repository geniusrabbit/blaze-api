"""
Role type defines whether the role is a role or a permission.
"""
enum RoleType {
  ROLE
  PERMISSION
}

"""
A role is a collection of permissions. A role can be a child of another role.
"""
type RBACRole {
	ID:       ID64!
	parentID: ID64
	name:     String!
	title:    String!
	type:     RoleType!

  """
  Context is a JSON object that defines the context of the role.
  The context is used to determine whether the role is applicable to the object.
  The context is a JSON object with the following structure:

	{"cover": "system", "object": "model:Role"}

  where:
	"cover" - is a name of the cover area of the object type
	"object" - is a name of the object type <module>:<object-name>
  """
	context:  NullableJSON

	childRolesAndPermissions: [RBACRole!]

  createdAt: Time!
  updatedAt: Time!
	deletedAt: Time
}

"""
RBACRoleEdge is a connection edge type for RBACRole.
"""
type RBACRoleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RBACRole
}

"""
RBACRoleConnection implements collection accessor interface with pagination.
"""
type RBACRoleConnection {
  """
  The total number of campaigns
  """
  totalCount: Int!

  """
  The edges for each of the RBACRoles's lists
  """
  edges: [RBACRoleEdge!]

  """
  A list of the RBACRoles, as a convenience when edges are not needed.
  """
  list: [RBACRole!]

  """
  Information for paginating this connection
  """
  pageInfo: PageInfo!
}

"""
RBACRolePayload wrapper to access of RBACRole oprtation results
"""
type RBACRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationID: String!

  """
  Role ID operation result
  """
  roleID: ID64!

  """
  Role object accessor
  """
  role: RBACRole
}

###############################################################################
# Query
###############################################################################

input RBACRoleListFilter {
  ID:   [ID64!]
  name: [String!]
  type: [RoleType!]
}

input RBACRoleListOrder {
  ID:    Ordering
  name:  Ordering
  title: Ordering
  type:  Ordering
}

###############################################################################
# Mutations
###############################################################################

input RBACRoleInput {
  parentID: ID64
  name:     String
  title:    String
  type:     RoleType!
  context:  NullableJSON
}

###############################################################################
# Query declarations
###############################################################################

extend type Query {
  """
  Get RBAC role object by ID
  """
  role(id: ID64!): RBACRolePayload! @hasPermissions(permissions: [{key: "model:Role", access: ["view"]}])

  """
  Check if the user has access to the particular role or permission.
  Returns the area of the access or null if access is denied.
  """
  checkPermission(name: String!, key: String = null, targetID: String = null): String @hasPermissions(permissions: [{key: "model:Role", access: ["check"]}])

  """
  List of the RBAC role objects which can be filtered and ordered by some fields
  """
  listRoles(
    filter: RBACRoleListFilter = null,
    order: RBACRoleListOrder = null,
    page: Page = null
  ): RBACRoleConnection @hasPermissions(permissions: [{key: "model:Role", access: ["list"]}])
}

extend type Mutation {
  """
  Create the new RBAC role
  """
  createRole(input: RBACRoleInput!): RBACRolePayload! @hasPermissions(permissions: [{key: "model:Role", access: ["create"]}])

  """
  Update RBAC role info
  """
  updateRole(id: ID64!, input: RBACRoleInput!): RBACRolePayload! @hasPermissions(permissions: [{key: "model:Role", access: ["update"]}])

  """
  Delete RBAC role
  """
  deleteRole(id: ID64!, msg: String = null): RBACRolePayload! @hasPermissions(permissions: [{key: "model:Role", access: ["delete"]}])
}
